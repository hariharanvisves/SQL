// Install MySql database
// Open up MySQL Command Line Client

// From this we can create a database

create database student;   // Copy this line to create a database with name student

// Now open MySQL Workbench. I am using MySQL Workbench 8.0 CE or Use PopSQL

// Basic datatype of SQL
/*
INT          --> Whole numbers
DECIMAL(m,n) --> Decimal numbers with m digits and n digits after decimal point
VARCHAR(l)   --> String of text with length l
BLOB         --> Binary Large Object, stores large data like documents, images etc.,
DATE         --> 'YYYY-MM-DD' format
TIMESTAMP    --> 'YYYY-MM-DD HH:MM:SS' used for recordings
*/

// In this all the uppercase words are keywords
                                                                /* Schemas */

// -- is the comment for SQL

// Creation of Tables in a database

CREATE TABLE student (
    student_id INT PRIMARY KEY,         // Here we can create a primary key directly or
    name VARCHAR(20),
    major VARCHAR(20)
);

CREATE TABLE student (
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),
    PRIMARY KEY(student_id)             // Or we can use here
);


// to describe the student tables with all the definitions

DESCRIBE student;


// deletion of the entire student table

DROP TABLE student;


// now we are going to alter the table student with adding gpa to student table

ALTER TABLE student ADD gpa DECIMAL(3,2);              // after altering now we describe the student table it will give gpa added to fourth column


// delete the particular column from the student table

ALTER TABLE student DROP COLUMN gpa;                   // after altering now we describe the student table it will give gpa deleted from fourth column


// inserting data into the student table

// 1. Inserting the all the required values in the student table
INSERT INTO student VALUES(
    1,
    'Jack',
    'Biology'
);

// 2. Inserting the corresponding values in the student table
INSERT INTO student(student_id, name, major) VALUES (
    2,
    'Manoj', 
    'Maths'
);

// 3. Inserting particular values in the student table
INSERT INTO student(student_id, name) VALUES (
    3,
    'Raju' 
);                                      // From this the major has the default value of NULL
// But we can't able to make the primary key value as NULL or making empty


// To get the data values from the student table 
SELECT * FROM student;                  // * is used to get all the data from the tables

SELECT student_id, name FROM student;   // We can get the data of the required fields in the student table


// We can use constrains to make easier to control the inserting elements in the table

// 1. NOT NULL command - this is used to not to get NULL values for the particular column
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,          // In this we cannot INSERT the value of the name value in NULL 
    major VARCHAR(20)
);

// 2. UNIQUE command - this is used to unique values for the particular column
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) UNIQUE          // In this we cannot INSERT the value of the subject value in same subject name i.e, no duplicates entry premises
);
// Since PRIMARY KEY is a key which has both NOT NULL and UNIQUE constrains

// 3. DEFAULT command - this is used to give the default value for the particular column
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) DEFAULT 'undecided'   // When we insert elements without a major column it will automatically puts default value
);

// 4. AUTO_INCREMENT command - this is used to automatically puts the number by incrementing the values from 1
CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,  // This will automatically increment the values when we insert the student_id column without values
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) DEFAULT 'undecided'   
);
// Since we use AUTO_INCREMENT we cannot use PRIMARY KEY constrains


// Updating and deleting the row in the tables

UPDATE student
SET major = 'Bio'
WHERE major = 'Biology';        // This is used to update the row values with the condition
// other comparisons are : = , <> , > , < , >= , <=

UPDATE student
SET major = 'Maths'
WHERE student_id = 3; 

UPDATE student
SET major = 'Bio-Chemistry'
WHERE major = 'Biology' OR major = 'Chemistry'; 
// other logical operators are : AND, OR, NOT NULL

UPDATE student
SET name = 'Hari', major = 'Physics'
WHERE student_id = 1;

UPDATE student
SET major = 'Maths';        // Here without condition, by this we put all the row values of major to 'maths'

DELETE FROM student;        // This will delete the entire row in the table but not the tables

DELETE FROM student
WHERE student_id = 5;       // This will delete the row whose student_id is 5

DELETE FROM student
WHERE name = 'Hari' AND major = 'undecided';

// Basic Queries

// first add the list of student's details to the table
INSERT INTO student VALUES(1,'Jack','Biology');
INSERT INTO student VALUES(2,'Kate','Sociology');
INSERT INTO student VALUES(3,'Claire','Chemistry');
INSERT INTO student VALUES(4,'Jack','Biology');
INSERT INTO student VALUES(5,'Mike','Computer Science');

SELECT * FROM student;                                                  // Gives all values from the student table
SELECT name FROM student;                                               // Gives all the name values from the student table
SELECT name,major FROM student;                                         // Gives all the name and major values from the student table
SELECT student.student_id, student.name FROM student;                   // Gives all the student_id and name  values from the student table

// ORDER BY 

SELECT student.name, student.major 
FROM student
ORDER BY name;                                      // It will give the ascending order of name along with the major value

SELECT student.name, student.major 
FROM student
ORDER BY name ASE;                                  // It will gives in ascending order

SELECT student.name, student.major 
FROM student
ORDER BY student_id DESC;                           // It will gives in descending order

SELECT * 
FROM student
ORDER BY name,student_id;                           // First order by name then by student_id

SELECT * 
FROM student
ORDER BY name,student_id DESC;                      // First order by name then by student_id by descending order

SELECT * 
FROM student
ORDER BY name DESC,student_id DESC;                 // First order by name by descending then by student_id by descending order

// Getting specified row values from tables
// LIMIT Query
SELECT * 
FROM student
LIMIT 2;                                            // This will give the values of the first 2 row's since we give limit 2

SELECT * 
FROM student
ORDER BY student_id DESC
LIMIT 2;                                            // This will give the values of the top two rows which is descending order of student_id

// Filtering the values 
SELECT *
FROM student
WHERE major = 'Biology';                            // Only show the students who has the major in Biology 

SELECT name,major
FROM student
WHERE major = 'Biology' OR student_id > 3 OR name <> 'Kate';     // Only show the name and major of students who has the major in Biology or student_id is greater than 3 or name is not Kate
// we can use <> , <= , >= , < , > , AND , OR 


// Using IN keyword
SELECT *
FROM student
WHERE name IN ('Mike','Kate');                      // Gives all the student name whose name is Mike, Kate

SELECT *
FROM student
WHERE major IN ('Biology','Chemistry');             // Gives all the student name whose major is Biology, Chemistry

SELECT *
FROM student
WHERE major IN ('Biology','Chemistry') AND student_id > 2;             // Gives all the student name whose major is Biology, Chemistry and student_id is greater than 2

